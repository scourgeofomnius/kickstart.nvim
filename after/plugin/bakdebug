local dap_ok, dap = pcall(require, "dap")
if not (dap_ok) then
    print("nvim dap not installed")
    return
end


require('dap').set_log_level("INFO")
   dap.configurations.cpp = {
       {
           name = "Launch",
           type = "codelldb",
           request = "launch",
           program = function()
               return vim.fn.input('Path to executable: ' .. vim.fn.getcwd() .. '/' .. 'hello.exe')
           end,
           cwd = '${workspaceFolder}',
           stopOnEntry = false,
           args = {},
           runInTerminal = true,
       }
    }
    dap.adapters.executable = {
        type = 'executable',
        command = vim.fn.stdpath("data") .. '/mason/bin/codelldb',
        name = 'lldb1',
        host = '127.0.0.1',
        port = 13000
    }
    dap.adapters.codelldb = {
    name = "codelldb server",
    type = 'server',
    port = "${port}",
    executable = {
        command = vim.fn.stdpath("data") .. '/mason/bin/codelldb',
        args = { "--port", "${port}" },
    }
}
local dapui = require 'dap.ui'

dap.listeners.after.event_initialized["dapui_config"] = function()
  dapui.open()
end
dap.listeners.before.event_terminated["dapui_config"] = function()
  dapui.close()
end
dap.listeners.before.event_exited["dapui_config"] = function()
  dapui.close()
end

vim.keymap.set("n", "<Leader>dt", ':DapToggleBreakpoint<CR>')
vim.keymap.set("n", "<Leader>dx", ':DapTerminate<CR>')
vim.keymap.set("n", "<Leader>do", ':DapStepOver<CR>')
